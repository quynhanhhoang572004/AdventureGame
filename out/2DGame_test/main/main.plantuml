@startuml main

class AssetSetter {
  - gp: GamePanel

  + AssetSetter(gp: GamePanel)
  + setObject(): void
}

class CollisionChecker {
  - gp: GamePanel

  + CollisionChecker(gp: GamePanel)
  + checkTile(entity: Entity): void
  + checkObject(entity: Entity, player: boolean): int
}

class GamePanel {
  - originalTileSize: int
  - scale: int
  - tileSize: int
  - maxScreenCol: int
  - maxScreenRow: int
  - screenWidth: int
  - screenHeight: int
  - maxWorldCol: int
  - maxWorldRow: int
  - FPS: int
  - tileM: TileManager
  - keyH: KeyHandler
  - music: Sound
  - se: Sound
  - cChecker: CollisionChecker
  - aSetter: AssetSetter
  - ui: UI
  - gameThread: Thread
  - player: Player
  - obj: SuperObject[10]
  - gameState: int
  - titleState: int
  - playState: int
  - pauseState: int

  + GamePanel()
  + setupGame(): void
  + startGameThread(): void
  + run(): void
  + update(): void
  + paintComponent(g: Graphics): void
  + playMusic(i: int): void
  + stopMusic(): void
  + playSE(i: int): void
}

class KeyHandler {
  - gp: GamePanel
  - upPressed: boolean
  - downPressed: boolean
  - leftPressed: boolean
  - rightPressed: boolean
  - checkDrawTime: boolean

  + KeyHandler(gp: GamePanel)
  + keyTyped(e: KeyEvent): void
  + keyPressed(e: KeyEvent): void
  + keyReleased(e: KeyEvent): void
}

class Sound {
  + setFile(i: int): void
  + play(): void
  + loop(): void
  + stop(): void
}

class SuperObject {
  // Assuming SuperObject class exists
}

class TileManager {
  // Assuming TileManager class exists
}

class UI {
  - gp: GamePanel
  - arial_40: Font
  - arial_80B: Font
  - messageOn: boolean
  - message: String
  - messageCounter: int
  - gameFinished: boolean
  - g2: Graphics2D
  - commandNum: int

  + UI(gp: GamePanel)
  + showMessage(text: String): void
  + draw(g2: Graphics2D): void
  + drawPauseScreen(): void
  + drawTitleScreen(): void
  + getXforCenteredObject(text: String): int
}

abstract class Entity {
  - worldX: int
  - worldY: int
  - speed: int
  - up1: BufferedImage
  - up2: BufferedImage
  - down1: BufferedImage
  - down2: BufferedImage
  - left1: BufferedImage
  - left2: BufferedImage
  - right1: BufferedImage
  - right2: BufferedImage
  - direction: String
  - spriteCounter: int
  - spriteNum: int
  - solidArea: Rectangle
  - solidAreaDefaultX: int
  - solidAreaDefaultY: int
  - collisionOn: boolean

  + update(): void
  + draw(g2: Graphics2D): void
}

class Player {
  - gp: GamePanel
  - keyH: KeyHandler
  - screenX: int
  - screenY: int
  - solidArea: Rectangle
  - solidAreaDefaultX: int
  - solidAreaDefaultY: int
  - worldX: int
  - worldY: int
  - speed: int
  - direction: String
  - hasKey: String
  - spriteCounter: int
  - spriteNum: int
  - up1: BufferedImage
  - up2: BufferedImage
  - down1: BufferedImage
  - down2: BufferedImage
  - left1: BufferedImage
  - left2: BufferedImage
  - right1: BufferedImage
  - right2: BufferedImage

  + Player(gp: GamePanel, keyH: KeyHandler)
  + setDefaultValues(): void
  + getPlayerImage(): void
  + setup(imageName: String): BufferedImage
  + update(): void
  + pickupObject(i: int): void
  + draw(g2: Graphics2D): void
}

GamePanel -- AssetSetter
GamePanel -- CollisionChecker
GamePanel -- KeyHandler
GamePanel -- UI
GamePanel -- Player
GamePanel -- TileManager
GamePanel -- Sound
GamePanel -- SuperObject
CollisionChecker -- Entity
Player -- Entity

@enduml
